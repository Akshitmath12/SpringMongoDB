// Test generated by RoostGPT for test Rest_Assured-test using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /laureates_get for http method type GET in rest-assured framework

// RoostTestHash=bb9ad621b1

package com.telusko.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class laureatesGetTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void laureates_get_Test() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/telusko/RoostTest/laureates_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> params = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    params.put(headers[i], data[i]);
                }

                Response response = given()
                    .queryParams(params)
                    .when()
                    .get("/laureates")
                    .then()
                    .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        throw new IllegalStateException("Unexpected response code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        System.out.println("Description: Successful call of Laureate(s).");
        response.then().body("laureates", not(empty()));
        // Additional assertions can be added here based on the JSON response structure
    }

    private void validateErrorResponse(Response response) {
        System.out.println("Description: Bad request. The request could not be understood by the server due to malformed syntax, modifications needed.");
        response.then().body("code", is("400"));
        response.then().body("message", notNullValue());
        // Additional assertions can be added here based on the JSON response structure
    }

    private void validateNotFoundResponse(Response response) {
        System.out.println("Description: Not Found. The requested resource could not be found but may be available again in the future.");
        response.then().body("code", is("404"));
        response.then().body("message", notNullValue());
        // Additional assertions can be added here based on the JSON response structure
    }

    private void validateUnprocessableEntityResponse(Response response) {
        System.out.println("Description: Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.");
        response.then().body("code", is("422"));
        response.then().body("message", notNullValue());
        // Additional assertions can be added here based on the JSON response structure
    }
}
