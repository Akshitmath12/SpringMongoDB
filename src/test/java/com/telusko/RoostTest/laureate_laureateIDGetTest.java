// Test generated by RoostGPT for test Rest_Assured-test using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /laureate/{laureateID}_get for http method type GET in rest-assured framework

// RoostTestHash=3a8d014c99

package com.telusko.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class laureate_laureateIDGetTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void laureate_laureateID_get_Test() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/telusko/RoostTest/laureate_laureateID_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                    .pathParam("laureateID", map.get("laureateID"))
                    .when()
                    .get("/laureate/{laureateID}")
                    .then()
                    .contentType(io.restassured.http.ContentType.JSON)
                    .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        throw new AssertionError("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        response.then().statusCode(200)
            .body("laureateID", equalTo(response.path("laureateID")));
    }

    private void validateErrorResponse(Response response) {
        response.then().statusCode(400)
            .body("code", instanceOf(String.class))
            .body("message", instanceOf(String.class));
        System.out.println("Description: Bad request. Modifications needed.");
    }

    private void validateNotFoundResponse(Response response) {
        response.then().statusCode(404)
            .body("code", instanceOf(String.class))
            .body("message", instanceOf(String.class));
        System.out.println("Description: Not Found. May be available in the future.");
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().statusCode(422)
            .body("code", instanceOf(String.class))
            .body("message", instanceOf(String.class));
        System.out.println("Description: Unprocessable Entity. Semantic errors found.");
    }
}
