// Test generated by RoostGPT for test Rest_Assured-test using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /nobelPrize/{category}/{year}_get for http method type GET in rest-assured framework

// RoostTestHash=adfce3f1d2

package com.telusko.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class nobelPrize_category_yearGetTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void nobelPrize_category_year_get_Test() {
        String csvFilePath = "src/test/java/com/telusko/RoostTest/nobelPrize_category_year_get.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                Map<String, String> map = createMapFromCsvData(headers, data);

                Response response = given()
                        .pathParam("category", map.get("category"))
                        .pathParam("year", map.get("year"))
                        .when()
                        .get("/nobelPrize/{category}/{year}")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createMapFromCsvData(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.contentType(), equalToIgnoringCase("application/json"));
        // Add specific success response assertions here
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.contentType(), equalToIgnoringCase("application/json"));
        assertThat(response.jsonPath().getString("code"), not(isEmptyOrNullString()));
        assertThat(response.jsonPath().getString("message"), not(isEmptyOrNullString()));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.contentType(), equalToIgnoringCase("application/json"));
        assertThat(response.jsonPath().getString("code"), equalTo("NOT_FOUND"));
        assertThat(response.jsonPath().getString("message"), containsString("could not be found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.contentType(), equalToIgnoringCase("application/json"));
        assertThat(response.jsonPath().getString("code"), equalTo("UNPROCESSABLE_ENTITY"));
        assertThat(response.jsonPath().getString("message"), containsString("unable to be followed"));
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }
}
