// Test generated by RoostGPT for test Rest_Assured-test using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /nobelPrizes_get for http method type GET in rest-assured framework

// RoostTestHash=4940f5c55b

package com.telusko.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class nobelPrizesGetTest {

    private static final String CSV_FILE_PATH = "src/test/java/com/telusko/RoostTest/nobelPrizes_get.csv";

    @Test
    public void nobelPrizes_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String[] headers = reader.readLine().split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> queryParams = extractQueryParamsFromLine(headers, line);

                Response response = given()
                        .queryParams(queryParams)
                        .when()
                        .get("/nobelPrizes")
                        .then()
                        .extract().response();

                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Test failed due to an IOException: " + e.getMessage());
        }
    }

    private Map<String, String> extractQueryParamsFromLine(String[] headers, String line) {
        Map<String, String> queryParams = new HashMap<>();
        String[] data = line.split(",");
        for (int i = 0; i < headers.length; i++) {
            queryParams.put(headers[i], data[i]);
        }
        return queryParams;
    }

    private void validateSuccessResponse(Response response) {
        response.then().assertThat()
                .statusCode(200)
                .body("nobelPrizes", instanceOf(List.class));

        // Additional validations based on the response structure can be performed here.
        // For example:
        assertThat("Description: Successful call of Nobel Prize(s) according to the filled fields", true);
    }

    private void validateErrorResponse(Response response) {
        response.then().assertThat()
                .statusCode(400)
                .body("code", instanceOf(String.class))
                .body("message", instanceOf(String.class));

        System.out.println("Description: Bad request. The request could not be understood by the server due to malformed syntax, modifications needed.");
    }

    private void validateNotFoundResponse(Response response) {
        response.then().assertThat()
                .statusCode(404)
                .body("code", instanceOf(String.class))
                .body("message", instanceOf(String.class));

        System.out.println("Description: Not Found. The requested resource could not be found but may be available again in the future.");
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().assertThat()
                .statusCode(422)
                .body("code", instanceOf(String.class))
                .body("message", instanceOf(String.class));

        System.out.println("Description: Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors.");
    }

    private void fail(String message) {
        assertThat(message, false);
    }
}
