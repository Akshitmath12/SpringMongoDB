// This test file is marked invalid as it contains compilation errors. Change the extension to of this file to .java, to manually edit its contents


// ********RoostGPT********
/*
Test generated by RoostGPT for test akshit3dec using AI Type Vertex AI and AI Model code-bison-32k

ROOST_METHOD_HASH=apiInfo_b15996cb2b
ROOST_METHOD_SIG_HASH=apiInfo_95b025c193

 **Test Scenario 1: Null ApiInfoBuilder**

**TestName**: testApiInfoNullApiInfoBuilder

**Description**: Verify that the apiInfo() method returns a valid ApiInfo object even when the ApiInfoBuilder is null.

**Execution**:
- Arrange: Set up a scenario where the ApiInfoBuilder is null.
- Act: Invoke the apiInfo() method with the null ApiInfoBuilder.
- Assert: Use JUnit assertions to verify that the returned ApiInfo object is not null.

**Validation**:
- This test ensures that the apiInfo() method can handle null ApiInfoBuilder instances and still return a valid ApiInfo object. This is important to ensure that the application does not crash or throw errors in such scenarios.

**Significance**:
- This test is important because it verifies the robustness of the apiInfo() method and its ability to handle unexpected situations. It helps ensure the application's stability and reliability in production environments.

---

**Test Scenario 2: Empty ApiInfoBuilder**

**TestName**: testApiInfoEmptyApiInfoBuilder

**Description**: Verify that the apiInfo() method returns a valid ApiInfo object even when the ApiInfoBuilder is empty.

**Execution**:
- Arrange: Set up a scenario where the ApiInfoBuilder is empty (i.e., no properties are set).
- Act: Invoke the apiInfo() method with the empty ApiInfoBuilder.
- Assert: Use JUnit assertions to verify that the returned ApiInfo object is not null and has default values for all properties.

**Validation**:
- This test ensures that the apiInfo() method can handle empty ApiInfoBuilder instances and still return a valid ApiInfo object with default values. This is important to ensure that the application does not crash or throw errors in such scenarios.

**Significance**:
- This test is important because it verifies the apiInfo() method's behavior when minimal or no configuration is provided. It helps ensure the application's flexibility and ease of use in different scenarios.

---

**Test Scenario 3: Custom ApiInfoBuilder**

**TestName**: testApiInfoCustomApiInfoBuilder

**Description**: Verify that the apiInfo() method can successfully create an ApiInfo object with custom properties set through the ApiInfoBuilder.

**Execution**:
- Arrange: Set up a scenario where the ApiInfoBuilder is customized with specific values for various properties (e.g., title, description, version, etc.).
- Act: Invoke the apiInfo() method with the customized ApiInfoBuilder.
- Assert: Use JUnit assertions to verify that the returned ApiInfo object contains the expected custom property values.

**Validation**:
- This test ensures that the apiInfo() method can correctly apply custom configurations provided through the ApiInfoBuilder. This is important to ensure that the application can be customized to meet different requirements and branding needs.

**Significance**:
- This test is important because it verifies the flexibility and extensibility of the apiInfo() method. It allows developers to tailor the API documentation according to their specific needs and preferences.
*/

// ********RoostGPT********

package com.telusko.joblisting;
import com.telusko.joblisting.JoblistingApplication;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import springfox.documentation.service.ApiInfo;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.*;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RestController;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootTest
public class JoblistingApplicationApiInfoTest {
    @Test
    @Tag("valid")
    @DisplayName("Test ApiInfo with Default ApiInfoBuilder")
    void testApiInfoDefaultApiInfoBuilder() {
        // Arrange
        JoblistingApplication application = new JoblistingApplication();
        // Act
        ApiInfo apiInfo = application.apiInfo();
        // Assert
        assertNotNull(apiInfo);
    }
    @Test
    @Tag("valid")
    @DisplayName("Test ApiInfo with Custom ApiInfoBuilder")
    void testApiInfoCustomApiInfoBuilder() {
        // Arrange
        JoblistingApplication application = new JoblistingApplication();
        ApiInfoBuilder builder = new ApiInfoBuilder();
        builder.title("Custom Title");
        builder.description("Custom Description");
        builder.version("1.0");
        // Act
        ApiInfo apiInfo = application.apiInfo(builder);
        // Assert
        assertNotNull(apiInfo);
        assertEquals("Custom Title", apiInfo.getTitle());
        assertEquals("Custom Description", apiInfo.getDescription());
        assertEquals("1.0", apiInfo.getVersion());
    }
    @Test
    @Tag("invalid")
    @DisplayName("Test ApiInfo with Null ApiInfoBuilder")
    void testApiInfoNullApiInfoBuilder() {
        // Arrange
        JoblistingApplication application = new JoblistingApplication();
        // Act
        ApiInfo apiInfo = application.apiInfo(null);
        // Assert
        assertNotNull(apiInfo);
    }
}