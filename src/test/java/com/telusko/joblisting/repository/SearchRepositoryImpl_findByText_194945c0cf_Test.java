// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Autowired
    private SearchRepositoryImpl_findByText_194945c0cf_Test searchRepository;

    @Mock
    private MongoClient client;

    @Mock
    private MongoDatabase database;

    @Mock
    private MongoCollection<Document> collection;

    @Mock
    private AggregateIterable<Document> result;

    @Mock
    private MongoConverter converter;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        searchRepository = new SearchRepositoryImpl_findByText_194945c0cf_Test(client, converter);
    }

    @Test
    public void testFindByTextSuccess() {
        String text = "Java";
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        when(collection.aggregate(Arrays.asList(
                new Document("$search", new Document("text", new Document("query", text).append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort", new Document("exp", 1L)),
                new Document("$limit", 5L))
        )).thenReturn(result);

        List<Post> expectedPosts = Arrays.asList(new Post(), new Post());
        when(converter.read(Post.class, result)).thenReturn(expectedPosts);

        List<Post> actualPosts = searchRepository.findByText(text);

        assertEquals(expectedPosts, actualPosts);
    }

    @Test
    public void testFindByTextFailure() {
        String text = "Python";
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        when(collection.aggregate(Arrays.asList(
                new Document("$search", new Document("text", new Document("query", text).append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort", new Document("exp", 1L)),
                new Document("$limit", 5L))
        )).thenReturn(result);

        List<Post> expectedPosts = Arrays.asList();
        when(converter.read(Post.class, result)).thenReturn(expectedPosts);

        List<Post> actualPosts = searchRepository.findByText(text);

        assertEquals(expectedPosts, actualPosts);
    }
}
