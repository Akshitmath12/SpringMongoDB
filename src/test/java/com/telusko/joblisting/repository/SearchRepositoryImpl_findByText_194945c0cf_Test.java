// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    MongoClient client;

    @Mock
    MongoConverter converter;

    @InjectMocks
    SearchRepositoryImpl searchRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindByText() {
        MongoDatabase mockDatabase = mock(MongoDatabase.class);
        MongoCollection mockCollection = mock(MongoCollection.class);
        AggregateIterable mockResult = mock(AggregateIterable.class);
        Post mockPost = mock(Post.class);

        when(client.getDatabase("telusko")).thenReturn(mockDatabase);
        when(mockDatabase.getCollection("JobPost")).thenReturn(mockCollection);
        when(mockCollection.aggregate(anyList())).thenReturn(mockResult);
        when(converter.read(any(), any())).thenReturn(mockPost);

        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(mockPost);

        List<Post> actualPosts = searchRepository.findByText("Java");

        verify(mockCollection, times(1)).aggregate(anyList());
        assertEquals(expectedPosts, actualPosts);
    }

    @Test
    public void testFindByText_noPosts() {
        MongoDatabase mockDatabase = mock(MongoDatabase.class);
        MongoCollection mockCollection = mock(MongoCollection.class);
        AggregateIterable mockResult = mock(AggregateIterable.class);

        when(client.getDatabase("telusko")).thenReturn(mockDatabase);
        when(mockDatabase.getCollection("JobPost")).thenReturn(mockCollection);
        when(mockCollection.aggregate(anyList())).thenReturn(mockResult);
        when(mockResult.iterator()).thenReturn(Arrays.asList().iterator());

        List<Post> actualPosts = searchRepository.findByText("Unexisting");

        verify(mockCollection, times(1)).aggregate(anyList());
        assertEquals(new ArrayList<>(), actualPosts);
    }
}
