// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @InjectMocks
    SearchRepositoryImpl searchRepository;

    @Mock
    MongoClient client;

    @Mock
    MongoDatabase database;

    @Mock
    MongoCollection<Document> collection;

    @Mock
    AggregateIterable<Document> result;

    @Mock
    MongoConverter converter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
    }

    @Test
    public void testFindByText_Success() {
        String text = "Java";
        Post post = new Post();
        List<Post> posts = new ArrayList<>();
        posts.add(post);

        when(collection.aggregate(anyList())).thenReturn(result);
        when(result.spliterator()).thenReturn(posts.spliterator());
        when(converter.read(Post.class, any(Document.class))).thenReturn(post);

        List<Post> actualPosts = searchRepository.findByText(text);
        assertEquals(posts.size(), actualPosts.size());
        verify(collection, times(1)).aggregate(anyList());
    }

    @Test
    public void testFindByText_NoPostsFound() {
        String text = "NonExistentTech";
        List<Post> emptyPosts = new ArrayList<>();

        when(collection.aggregate(anyList())).thenReturn(result);
        when(result.spliterator()).thenReturn(emptyPosts.spliterator());

        List<Post> actualPosts = searchRepository.findByText(text);
        assertEquals(emptyPosts.size(), actualPosts.size());
        verify(collection, times(1)).aggregate(anyList());
    }
}
