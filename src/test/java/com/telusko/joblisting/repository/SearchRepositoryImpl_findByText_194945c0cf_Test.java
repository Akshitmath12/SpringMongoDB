// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @InjectMocks
    private SearchRepositoryImpl searchRepository;

    @Mock
    private MongoClient client;

    @Mock
    private MongoDatabase database;

    @Mock
    private MongoCollection<Document> collection;

    @Mock
    private AggregateIterable<Document> result;

    @Mock
    private MongoConverter converter;

    @Before
    public void setUp() {
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        when(collection.aggregate(any())).thenReturn(result);
    }

    @Test
    public void testFindByText_Success() {
        String text = "Java";
        Document document = new Document();
        Post post = new Post();
        post.setTechs(Arrays.asList("Java", "Spring"));
        post.setDesc("Java Developer");
        post.setProfile("Software Developer");

        when(result.spliterator()).thenReturn(Arrays.asList(document).spliterator());
        when(converter.read(Post.class, document)).thenReturn(post);

        List<Post> posts = searchRepository.findByText(text);

        assertNotNull(posts);
        assertEquals(1, posts.size());
        assertEquals(post, posts.get(0));
    }

    @Test
    public void testFindByText_EmptyResult() {
        String text = "Python";

        when(result.spliterator()).thenReturn(new ArrayList<Document>().spliterator());

        List<Post> posts = searchRepository.findByText(text);

        assertNotNull(posts);
        assertEquals(0, posts.size());
    }
}
