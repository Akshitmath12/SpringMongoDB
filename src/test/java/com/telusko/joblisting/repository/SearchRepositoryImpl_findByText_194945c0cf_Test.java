// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@SpringBootTest
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Autowired
    private SearchRepository searchRepository;

    @MockBean
    private MongoClient client;

    @MockBean
    private MongoConverter converter;

    @Test
    public void testFindByText_Success() {
        MongoDatabase database = mock(MongoDatabase.class);
        MongoCollection<Document> collection = mock(MongoCollection.class);
        AggregateIterable<Document> result = mock(AggregateIterable.class);
        Post post = new Post();
        post.setProfile("Java Developer");
        post.setDesc("Backend Developer");
        post.setExp(3);
        post.setTechs(new String[]{"Java", "Spring", "Hibernate"});
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        when(collection.aggregate(any())).thenReturn(result);
        when(converter.read(any(), any())).thenReturn(post);
        List<Post> posts = searchRepository.findByText("Java");
        assertNotNull(posts);
        assertEquals(1, posts.size());
    }

    @Test
    public void testFindByText_NoResult() {
        MongoDatabase database = mock(MongoDatabase.class);
        MongoCollection<Document> collection = mock(MongoCollection.class);
        AggregateIterable<Document> result = mock(AggregateIterable.class);
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        when(collection.aggregate(any())).thenReturn(result);
        List<Post> posts = searchRepository.findByText("Python");
        assertNotNull(posts);
        assertEquals(0, posts.size());
    }
}
