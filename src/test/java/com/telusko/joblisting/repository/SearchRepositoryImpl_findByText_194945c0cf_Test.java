// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    private MongoClient client;
    @Mock
    private MongoDatabase database;
    @Mock
    private MongoCollection<Document> collection;
    @Mock
    private AggregateIterable<Document> result;
    @Autowired
    private MongoConverter converter;
    @InjectMocks
    private SearchRepositoryImpl searchRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);
    }

    @Test
    public void testFindByText_Success() {
        String text = "Java";
        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(new Post());
        when(result.spliterator()).thenReturn(expectedPosts.spliterator());
        List<Post> actualPosts = searchRepository.findByText(text);
        assertNotNull(actualPosts);
        assertEquals(expectedPosts.size(), actualPosts.size());
        verify(client, times(1)).getDatabase("telusko");
        verify(database, times(1)).getCollection("JobPost");
    }

    @Test
    public void testFindByText_NoPostsFound() {
        String text = "Python";
        List<Post> expectedPosts = new ArrayList<>();
        when(result.spliterator()).thenReturn(expectedPosts.spliterator());
        List<Post> actualPosts = searchRepository.findByText(text);
        assertNotNull(actualPosts);
        assertEquals(expectedPosts.size(), actualPosts.size());
        verify(client, times(1)).getDatabase("telusko");
        verify(database, times(1)).getCollection("JobPost");
    }
}
