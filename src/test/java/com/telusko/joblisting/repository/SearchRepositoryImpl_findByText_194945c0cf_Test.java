// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    private MongoClient client;

    @Mock
    private MongoConverter converter;

    @InjectMocks
    private SearchRepositoryImpl searchRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindByText() {
        MongoDatabase database = mock(MongoDatabase.class);
        MongoCollection collection = mock(MongoCollection.class);
        AggregateIterable result = mock(AggregateIterable.class);

        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(any())).thenReturn(result);

        Post post = new Post();
        when(converter.read(Post.class, any())).thenReturn(post);

        List<Post> expected = new ArrayList<>();
        expected.add(post);

        List<Post> actual = searchRepository.findByText("Java");

        assertEquals(expected, actual);
    }

    @Test
    public void testFindByText_noPostsFound() {
        MongoDatabase database = mock(MongoDatabase.class);
        MongoCollection collection = mock(MongoCollection.class);
        AggregateIterable result = mock(AggregateIterable.class);

        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(any())).thenReturn(result);

        List<Post> expected = new ArrayList<>();

        List<Post> actual = searchRepository.findByText("NonExistent");

        assertEquals(expected, actual);
    }
}
