// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @InjectMocks
    SearchRepositoryImpl searchRepository;

    @Mock
    MongoClient client;

    @Mock
    MongoDatabase database;

    @Mock
    MongoCollection<Document> collection;

    @Mock
    MongoConverter converter;

    @Mock
    AggregateIterable<Document> result;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindByText_Success() {
        String text = "Java";
        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);

        Post post = new Post();
        post.setProfile("Java Developer");
        post.setDesc("Java Developer Job Description");
        post.setExp(3);
        post.setTechs(new String[]{"Java", "Spring"});
        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(post);

        when(converter.read(any(), any())).thenReturn(post);
        when(result.spliterator(), returnsElementsOf(expectedPosts));

        List<Post> actualPosts = searchRepository.findByText(text);
        assertEquals(expectedPosts, actualPosts);
    }

    @Test
    public void testFindByText_NoResults() {
        String text = "NonExistingTech";
        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);

        List<Post> expectedPosts = new ArrayList<>();
        when(result.spliterator(), returnsEmpty());

        List<Post> actualPosts = searchRepository.findByText(text);
        assertEquals(expectedPosts, actualPosts);
    }
}
