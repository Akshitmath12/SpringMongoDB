// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    MongoClient client;

    @Autowired
    MongoConverter converter;

    @Mock
    MongoDatabase database;

    @Mock
    MongoCollection<Document> collection;

    @Mock
    AggregateIterable<Document> result;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
    }

    @Test
    public void testFindByText_Success() {
        List<Post> expectedPosts = new ArrayList<>();
        Post post = new Post();
        post.setProfile("Java Developer");
        post.setDesc("Java, Spring Boot");
        post.setExp(2);
        post.setTechs(new String[]{"Java", "Spring Boot"});
        expectedPosts.add(post);

        when(collection.aggregate(anyList())).thenReturn(result);
        when(result.iterator()).thenReturn(Arrays.asList(new Document()).iterator());

        List<Post> actualPosts = new SearchRepositoryImpl_findByText_194945c0cf_Test().findByText("Java");

        assertEquals(expectedPosts, actualPosts);
        verify(collection, times(1)).aggregate(anyList());
    }

    @Test
    public void testFindByText_NoResults() {
        List<Post> expectedPosts = new ArrayList<>();

        when(collection.aggregate(anyList())).thenReturn(result);
        when(result.iterator()).thenReturn(Arrays.asList().iterator());

        List<Post> actualPosts = new SearchRepositoryImpl_findByText_194945c0cf_Test().findByText("Python");

        assertEquals(expectedPosts, actualPosts);
        verify(collection, times(1)).aggregate(anyList());
    }
}
