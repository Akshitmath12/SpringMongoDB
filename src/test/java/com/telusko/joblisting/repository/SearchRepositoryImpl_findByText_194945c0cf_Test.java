// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Autowired
    @InjectMocks
    private SearchRepositoryImpl searchRepository;

    @Mock
    private MongoClient client;

    @Mock
    private MongoDatabase database;

    @Mock
    private MongoCollection<Document> collection;

    @Mock
    private MongoConverter converter;

    @Test
    public void testFindByTextSuccess() {
        String text = "java";
        List<Post> expectedPosts = new ArrayList<>();
        expectedPosts.add(new Post("Java Developer", "Developing java applications", 3, new String[]{"Java", "Spring"}));

        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        AggregateIterable<Document> result = Mockito.mock(AggregateIterable.class);
        when(collection.aggregate(Arrays.asList(new Document("$search",
                new Document("text",
                        new Document("query", text)
                                .append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort",
                        new Document("exp", 1L)),
                new Document("$limit", 5L)))).thenReturn(result);
        when(converter.read(Post.class, new Document())).thenReturn(expectedPosts.get(0));

        List<Post> actualPosts = searchRepository.findByText(text);

        assertEquals(expectedPosts, actualPosts);
    }

    @Test
    public void testFindByTextFailure() {
        String text = "java";
        List<Post> expectedPosts = new ArrayList<>();

        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        AggregateIterable<Document> result = Mockito.mock(AggregateIterable.class);
        when(collection.aggregate(Arrays.asList(new Document("$search",
                new Document("text",
                        new Document("query", text)
                                .append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort",
                        new Document("exp", 1L)),
                new Document("$limit", 5L)))).thenReturn(result);
        when(converter.read(Post.class, new Document())).thenReturn(null);

        List<Post> actualPosts = searchRepository.findByText(text);

        assertEquals(expectedPosts, actualPosts);
    }
}
