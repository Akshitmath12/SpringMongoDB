// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Autowired
    private SearchRepositoryImpl searchRepository;

    @Mock
    private MongoClient client;

    @Mock
    private MongoDatabase database;

    @Mock
    private MongoCollection collection;

    @Mock
    private AggregateIterable<Document> result;

    @Mock
    private MongoConverter converter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        searchRepository = new SearchRepositoryImpl(client, converter);
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
    }

    @Test
    public void testFindByText() {
        String text = "Java";
        List<Post> posts = new ArrayList<>();
        Post post = new Post();
        post.setTechs(Arrays.asList("Java", "Spring Boot"));
        post.setDesc("Java Developer");
        posts.add(post);

        when(collection.aggregate(Arrays.asList(new Document("$search",
                new Document("text",
                        new Document("query", text)
                                .append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort",
                        new Document("exp", 1L)),
                new Document("$limit", 5L)))).thenReturn(result);

        when(result.spliterator()).thenReturn(posts.spliterator());
        when(converter.read(Post.class, post)).thenReturn(post);

        List<Post> resultPosts = searchRepository.findByText(text);

        assertEquals(posts.size(), resultPosts.size());
        assertEquals(posts.get(0).getTechs(), resultPosts.get(0).getTechs());
        assertEquals(posts.get(0).getDesc(), resultPosts.get(0).getDesc());
    }

    @Test
    public void testFindByTextNoPostsFound() {
        String text = "Python";
        List<Post> posts = new ArrayList<>();

        when(collection.aggregate(Arrays.asList(new Document("$search",
                new Document("text",
                        new Document("query", text)
                                .append("path", Arrays.asList("techs", "desc", "profile")))),
                new Document("$sort",
                        new Document("exp", 1L)),
                new Document("$limit", 5L)))).thenReturn(result);

        when(result.spliterator()).thenReturn(posts.spliterator());

        List<Post> resultPosts = searchRepository.findByText(text);

        assertEquals(posts.size(), resultPosts.size());
    }
}
