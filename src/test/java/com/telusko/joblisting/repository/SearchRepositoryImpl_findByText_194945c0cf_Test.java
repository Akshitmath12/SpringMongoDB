// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Autowired
    private MongoClient client;

    @Autowired
    private MongoConverter converter;

    private SearchRepositoryImpl searchRepository;

    @BeforeEach
    public void setUp() {
        searchRepository = new SearchRepositoryImpl(client, converter);
    }

    @AfterEach
    public void tearDown() {
        searchRepository = null;
    }

    @Test
    public void testFindByText_Success() {
        MongoDatabase mockDatabase = mock(MongoDatabase.class);
        MongoCollection mockCollection = mock(MongoCollection.class);
        AggregateIterable mockResult = mock(AggregateIterable.class);

        when(client.getDatabase(anyString())).thenReturn(mockDatabase);
        when(mockDatabase.getCollection(anyString())).thenReturn(mockCollection);
        when(mockCollection.aggregate(any())).thenReturn(mockResult);

        Post mockPost = new Post();
        when(converter.read(any(), any())).thenReturn(mockPost);

        List<Post> result = searchRepository.findByText("java");
        assertEquals(1, result.size());
        assertEquals(mockPost, result.get(0));
    }

    @Test
    public void testFindByText_NoPostsFound() {
        MongoDatabase mockDatabase = mock(MongoDatabase.class);
        MongoCollection mockCollection = mock(MongoCollection.class);
        AggregateIterable mockResult = mock(AggregateIterable.class);

        when(client.getDatabase(anyString())).thenReturn(mockDatabase);
        when(mockDatabase.getCollection(anyString())).thenReturn(mockCollection);
        when(mockCollection.aggregate(any())).thenReturn(mockResult);

        List<Post> result = searchRepository.findByText("non-existent");
        assertEquals(0, result.size());
    }
}
