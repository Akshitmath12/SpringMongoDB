// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.convert.MongoConverter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @Mock
    private MongoClient client;

    @Mock
    private MongoConverter converter;

    @InjectMocks
    private SearchRepositoryImpl searchRepository;

    @Test
    public void testFindByText_success() {
        MongoDatabase database = Mockito.mock(MongoDatabase.class);
        MongoCollection<Document> collection = Mockito.mock(MongoCollection.class);
        AggregateIterable<Document> result = Mockito.mock(AggregateIterable.class);
        Post post = new Post();

        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);
        when(converter.read(any(), any())).thenReturn(post);

        List<Post> posts = searchRepository.findByText("Java");
        assertEquals(1, posts.size());
    }

    @Test
    public void testFindByText_noResult() {
        MongoDatabase database = Mockito.mock(MongoDatabase.class);
        MongoCollection<Document> collection = Mockito.mock(MongoCollection.class);
        AggregateIterable<Document> result = Mockito.mock(AggregateIterable.class);

        when(client.getDatabase(anyString())).thenReturn(database);
        when(database.getCollection(anyString())).thenReturn(collection);
        when(collection.aggregate(anyList())).thenReturn(result);

        List<Post> posts = searchRepository.findByText("NoResult");
        assertEquals(0, posts.size());
    }
}
