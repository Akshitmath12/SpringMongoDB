// Test generated by RoostGPT for test JavaUnitTest using AI Type Open AI and AI Model gpt-4

package com.telusko.joblisting.repository;

import com.mongodb.client.AggregateIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.telusko.joblisting.model.Post;
import org.bson.Document;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class SearchRepositoryImpl_findByText_194945c0cf_Test {

    @InjectMocks
    SearchRepositoryImpl searchRepository;

    @Mock
    MongoClient client;

    @Mock
    MongoDatabase database;

    @Mock
    MongoCollection collection;

    @Mock
    MongoConverter converter;

    @Test
    public void testFindByText_Success() {
        String text = "Java";
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        AggregateIterable<Document> result = mock(AggregateIterable.class);
        when(collection.aggregate(anyList())).thenReturn(result);
        Post post = new Post();
        post.setProfile("Java Developer");
        when(converter.read(Post.class, any())).thenReturn(post);
        List<Post> posts = searchRepository.findByText(text);
        assertEquals(1, posts.size());
        assertEquals("Java Developer", posts.get(0).getProfile());
    }

    @Test
    public void testFindByText_NoResults() {
        String text = "NonExistentTech";
        when(client.getDatabase("telusko")).thenReturn(database);
        when(database.getCollection("JobPost")).thenReturn(collection);
        AggregateIterable<Document> result = mock(AggregateIterable.class);
        when(collection.aggregate(anyList())).thenReturn(result);
        when(result.iterator().hasNext()).thenReturn(false);
        List<Post> posts = searchRepository.findByText(text);
        assertTrue(posts.isEmpty());
    }
}
