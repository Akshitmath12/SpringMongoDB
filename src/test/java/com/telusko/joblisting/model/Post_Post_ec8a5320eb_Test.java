/*
Test generated by RoostGPT for test Java_test using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenarios:**

**Scenario 1: Valid Post Creation**
- Given a valid Post object with all required fields populated,
- When the Post is saved to the database,
- Then the Post should be successfully saved and a unique ID should be generated.

**Scenario 2: Missing Required Fields**
- Given a Post object with one or more required fields missing,
- When the Post is saved to the database,
- Then the Post should not be saved and an error message should be returned indicating which fields are missing.

**Scenario 3: Duplicate Post Creation**
- Given a Post object with the same title and content as an existing Post,
- When the Post is saved to the database,
- Then the Post should not be saved and an error message should be returned indicating that a Post with the same title and content already exists.

**Scenario 4: Invalid Post Content**
- Given a Post object with invalid content, such as HTML tags or malicious code,
- When the Post is saved to the database,
- Then the Post should not be saved and an error message should be returned indicating that the content is invalid.

**Scenario 5: Post Deletion**
- Given a Post object that exists in the database,
- When the Post is deleted,
- Then the Post should be successfully deleted from the database.

**Scenario 6: Non-existent Post Deletion**
- Given a Post object that does not exist in the database,
- When the Post is deleted,
- Then the Post should not be deleted and an error message should be returned indicating that the Post does not exist.

**Scenario 7: Post Update**
- Given a Post object that exists in the database,
- When the Post is updated with new values,
- Then the Post should be successfully updated in the database.

**Scenario 8: Non-existent Post Update**
- Given a Post object that does not exist in the database,
- When the Post is updated,
- Then the Post should not be updated and an error message should be returned indicating that the Post does not exist.
*/
package com.telusko.joblisting.model;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;

import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

@DataMongoTest
@Import(PostRepository.class)
class Post_Post_ec8a5320eb_Test {

    @Autowired
    private PostRepository postRepository;

    @Autowired
    private MongoTemplate mongoTemplate;

    @Test
    @DisplayName("Scenario 1: Valid Post Creation")
    void testValidPostCreation() {
        // Given
        Post post = new Post();
        post.setProfile("Software Engineer");
        post.setDesc("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        post.setExp(5);
        post.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        // When
        Post savedPost = postRepository.save(post);

        // Then
        assertThat(savedPost.getId()).isNotNull();
        assertThat(savedPost.getProfile()).isEqualTo("Software Engineer");
        assertThat(savedPost.getDesc()).isEqualTo("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        assertThat(savedPost.getExp()).isEqualTo(5);
        assertThat(savedPost.getTechs()).isEqualTo(new String[]{"Java", "Spring Boot", "MongoDB"});
    }

    @Test
    @DisplayName("Scenario 2: Missing Required Fields")
    void testMissingRequiredFields() {
        // Given
        Post post = new Post();
        post.setProfile("Software Engineer");
        post.setExp(5);

        // When
        Exception exception = assertThrows(Exception.class, () -> postRepository.save(post));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Required fields are missing.");
    }

    @Test
    @DisplayName("Scenario 3: Duplicate Post Creation")
    void testDuplicatePostCreation() {
        // Given
        Post post1 = new Post();
        post1.setProfile("Software Engineer");
        post1.setDesc("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        post1.setExp(5);
        post1.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        Post post2 = new Post();
        post2.setProfile("Software Engineer");
        post2.setDesc("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        post2.setExp(5);
        post2.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        // When
        postRepository.save(post1);
        Exception exception = assertThrows(Exception.class, () -> postRepository.save(post2));

        // Then
        assertThat(exception.getMessage()).isEqualTo("A post with the same profile and desc already exists.");
    }

    @Test
    @DisplayName("Scenario 4: Invalid Post Content")
    void testInvalidPostContent() {
        // Given
        Post post = new Post();
        post.setProfile("Software Engineer");
        post.setDesc("<html>Experienced Software Engineer with a passion for building scalable and efficient applications.</html>");
        post.setExp(5);
        post.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        // When
        Exception exception = assertThrows(Exception.class, () -> postRepository.save(post));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Invalid post content.");
    }

    @Test
    @DisplayName("Scenario 5: Post Deletion")
    void testPostDeletion() {
        // Given
        Post post = new Post();
        post.setProfile("Software Engineer");
        post.setDesc("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        post.setExp(5);
        post.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        Post savedPost = postRepository.save(post);

        // When
        postRepository.delete(savedPost);

        // Then
        Query query = new Query();
        query.addCriteria(Criteria.where("id").is(savedPost.getId()));
        Post deletedPost = mongoTemplate.findOne(query, Post.class);

        assertThat(deletedPost).isNull();
    }

    @Test
    @DisplayName("Scenario 6: Non-existent Post Deletion")
    void testNonExistentPostDeletion() {
        // Given
        String nonExistentId = "1234567890";

        // When
        Exception exception = assertThrows(Exception.class, () -> postRepository.deleteById(nonExistentId));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Post not found.");
    }

    @Test
    @DisplayName("Scenario 7: Post Update")
    void testPostUpdate() {
        // Given
        Post post = new Post();
        post.setProfile("Software Engineer");
        post.setDesc("Experienced Software Engineer with a passion for building scalable and efficient applications.");
        post.setExp(5);
        post.setTechs(new String[]{"Java", "Spring Boot", "MongoDB"});

        Post savedPost = postRepository.save(post);

        savedPost.setProfile("Senior Software Engineer");
        savedPost.setDesc("Experienced Senior Software Engineer with a passion for building scalable and efficient applications.");
        savedPost.setExp(7);
        savedPost.setTechs(new String[]{"Java", "Spring Boot", "MongoDB", "AWS"});

        // When
        Post updatedPost = postRepository.save(savedPost);

        // Then
        assertThat(updatedPost.getProfile()).isEqualTo("Senior Software Engineer");
        assertThat(updatedPost.getDesc()).isEqualTo("Experienced Senior Software Engineer with a passion for building scalable and efficient applications.");
        assertThat(updatedPost.getExp()).isEqualTo(7);
        assertThat(updatedPost.getTechs()).isEqualTo(new String[]{"Java", "Spring Boot", "MongoDB", "AWS"});
    }

    @Test
    @DisplayName("Scenario 8: Non-existent Post Update")
    void testNonExistentPostUpdate() {
        // Given
        String nonExistentId = "1234567890";
        Post post = new Post();
        post.setProfile("Senior Software Engineer");
        post.setDesc("Experienced Senior Software Engineer with a passion for building scalable and efficient applications.");
        post.setExp(7);
        post.setTechs(new String[]{"Java", "Spring Boot", "MongoDB", "AWS"});

        // When
        Exception exception = assertThrows(Exception.class, () -> postRepository.save(post));

        // Then
        assertThat(exception.getMessage()).isEqualTo("Post not found.");
    }
}
