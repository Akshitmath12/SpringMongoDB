/*
Test generated by RoostGPT for test Java_test using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenario 1: Valid Input**

**Test Description:**
- Test the functionality of the `setTechs` method by providing a valid input array of technologies.
- Verify that the technologies are correctly assigned to the `techs` field of the object.

**Test Steps:**
1. Create an instance of the object.
2. Call the `setTechs` method with a valid array of technologies.
3. Assert that the `techs` field of the object contains the specified technologies.

**Expected Result:**
- The `techs` field should contain the specified technologies.

**Test Scenario 2: Empty Input**

**Test Description:**
- Test the behavior of the `setTechs` method when an empty array is provided as input.
- Verify that the `techs` field is set to an empty array.

**Test Steps:**
1. Create an instance of the object.
2. Call the `setTechs` method with an empty array.
3. Assert that the `techs` field of the object is an empty array.

**Expected Result:**
- The `techs` field should be an empty array.

**Test Scenario 3: Null Input**

**Test Description:**
- Test the behavior of the `setTechs` method when a null value is provided as input.
- Verify that the `techs` field remains unchanged.

**Test Steps:**
1. Create an instance of the object.
2. Call the `setTechs` method with a null value.
3. Assert that the `techs` field of the object remains unchanged.

**Expected Result:**
- The `techs` field should remain unchanged.

**Test Scenario 4: Invalid Input (Non-String Values)**

**Test Description:**
- Test the behavior of the `setTechs` method when an array containing non-string values is provided as input.
- Verify that the `techs` field remains unchanged.

**Test Steps:**
1. Create an instance of the object.
2. Call the `setTechs` method with an array containing non-string values.
3. Assert that the `techs` field of the object remains unchanged.

**Expected Result:**
- The `techs` field should remain unchanged.
*/
import com.telusko.joblisting.model.Post;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

@DisplayName("Post_setTechs_1b061b0fa7_Test")
public class Post_setTechs_1b061b0fa7_Test {

    @Test
    @DisplayName("Test Scenario 1: Valid Input")
    public void setTechs_validInput() {
        // Arrange
        Post post = new Post();

        // Act
        post.setTechs(new String[]{"Java", "Spring", "MongoDB"});

        // Assert
        assertArrayEquals(new String[]{"Java", "Spring", "MongoDB"}, post.getTechs());
    }

    @Test
    DisplayName("Test Scenario 2: Empty Input")
    public void setTechs_emptyInput() {
        // Arrange
        Post post = new Post();

        // Act
        post.setTechs(new String[]{});

        // Assert
        assertArrayEquals(new String[]{}, post.getTechs());
    }

    @Test
    DisplayName("Test Scenario 3: Null Input")
    public void setTechs_nullInput() {
        // Arrange
        Post post = new Post();

        // Act
        post.setTechs(null);

        // Assert
        assertEquals(null, post.getTechs());
    }

    @ParameterizedTest
    @DisplayName("Test Scenario 4: Invalid Input (Non-String Values)")
    @ValueSource(strings = {"123", "true", "null"})
    public void setTechs_invalidInput(String invalidTech) {
        // Arrange
        Post post = new Post();

        // Act
        post.setTechs(new String[]{invalidTech});

        // Assert
        assertArrayEquals(new String[]{invalidTech}, post.getTechs());
    }
}
