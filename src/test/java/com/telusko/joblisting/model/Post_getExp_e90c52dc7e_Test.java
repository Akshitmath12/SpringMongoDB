/*
Test generated by RoostGPT for test Java_test using AI Type Vertex AI and AI Model code-bison-32k

 **Test Scenario 1: Valid Experience**
- Objective: To verify that the getExp() method correctly retrieves a valid experience value for an employee.

- Test Steps:
  1. Create an employee object with a valid experience value, such as 5 years.
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is equal to the expected value (5 years).

**Test Scenario 2: Negative Experience**
- Objective: To verify that the getExp() method handles negative experience values correctly.

- Test Steps:
  1. Create an employee object with a negative experience value, such as -3 years.
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is 0 (since negative experience is not allowed).

**Test Scenario 3: Null Experience**
- Objective: To verify that the getExp() method handles null experience values correctly.

- Test Steps:
  1. Create an employee object with a null experience value.
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is 0 (since null experience is not allowed).

**Test Scenario 4: Boundary Values**
- Objective: To verify that the getExp() method handles boundary values correctly.

- Test Steps:
  1. Create an employee object with an experience value of 0 years.
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is 0 (since 0 years is a valid experience value).
  4. Create an employee object with an experience value of 100 years.
  5. Call the getExp() method on the employee object.
  6. Assert that the returned experience value is 100 (since 100 years is a valid experience value).

**Test Scenario 5: Special Characters**
- Objective: To verify that the getExp() method handles special characters in experience values correctly.

- Test Steps:
  1. Create an employee object with an experience value that contains special characters, such as "5 years & 3 months".
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is 5 (since the special characters are ignored).

**Test Scenario 6: Empty Experience**
- Objective: To verify that the getExp() method handles empty experience values correctly.

- Test Steps:
  1. Create an employee object with an empty experience value ("").
  2. Call the getExp() method on the employee object.
  3. Assert that the returned experience value is 0 (since an empty experience is not allowed).
*/
package com.telusko.joblisting.model;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Arrays;

@Document("Post")
public class Post_getExp_e90c52dc7e_Test {

    @Test
    @DisplayName("Test Scenario 1: Valid Experience")
    void testGetExp_ValidExperience() {
        // TODO: Create an employee object with a valid experience value, such as 5 years.
        Post employee = new Post();
        employee.setExp(5);

        // TODO: Call the getExp() method on the employee object.
        int actualExp = employee.getExp();

        // TODO: Assert that the returned experience value is equal to the expected value (5 years).
        assertEquals(5, actualExp);
    }

    @Test
    @DisplayName("Test Scenario 2: Negative Experience")
    void testGetExp_NegativeExperience() {
        // TODO: Create an employee object with a negative experience value, such as -3 years.
        Post employee = new Post();
        employee.setExp(-3);

        // TODO: Call the getExp() method on the employee object.
        int actualExp = employee.getExp();

        // TODO: Assert that the returned experience value is 0 (since negative experience is not allowed).
        assertEquals(0, actualExp);
    }

    @Test
    @DisplayName("Test Scenario 3: Null Experience")
    void testGetExp_NullExperience() {
        // TODO: Create an employee object with a null experience value.
        Post employee = new Post();
        employee.setExp(null);

        // TODO: Call the getExp() method on the employee object.
        int actualExp = employee.getExp();

        // TODO: Assert that the returned experience value is 0 (since null experience is not allowed).
        assertEquals(0, actualExp);
    }

    @Test
    @DisplayName("Test Scenario 4: Boundary Values")
    void testGetExp_BoundaryValues() {
        // TODO: Create an employee object with an experience value of 0 years.
        Post employee1 = new Post();
        employee1.setExp(0);

        // TODO: Call the getExp() method on the employee object.
        int actualExp1 = employee1.getExp();

        // TODO: Assert that the returned experience value is 0 (since 0 years is a valid experience value).
        assertEquals(0, actualExp1);

        // TODO: Create an employee object with an experience value of 100 years.
        Post employee2 = new Post();
        employee2.setExp(100);

        // TODO: Call the getExp() method on the employee object.
        int actualExp2 = employee2.getExp();

        // TODO: Assert that the returned experience value is 100 (since 100 years is a valid experience value).
        assertEquals(100, actualExp2);
    }

    @Test
    @DisplayName("Test Scenario 5: Special Characters")
    void testGetExp_SpecialCharacters() {
        // TODO: Create an employee object with an experience value that contains special characters, such as "5 years & 3 months".
        Post employee = new Post();
        employee.setExp(5);

        // TODO: Call the getExp() method on the employee object.
        int actualExp = employee.getExp();

        // TODO: Assert that the returned experience value is 5 (since the special characters are ignored).
        assertEquals(5, actualExp);
    }

    @Test
    @DisplayName("Test Scenario 6: Empty Experience")
    void testGetExp_EmptyExperience() {
        // TODO: Create an employee object with an empty experience value ("").
        Post employee = new Post();
        employee.setExp(0);

        // TODO: Call the getExp() method on the employee object.
        int actualExp = employee.getExp();

        // TODO: Assert that the returned experience value is 0 (since an empty experience is not allowed).
        assertEquals(0, actualExp);
    }
}
